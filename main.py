'''

#Курсовой проект.
#
#По профессиональному модулю МДК 03.01: "Технология разработки программного обеспечения". 
Тема: "Нахождение определенного интеграла математическими методами"
Разработал: Крюков Егор Сергеевич ТМП-62.
Версия 2.5, 10.06.2018.
Язык разработки: Python3.
Задание:
	Составить программу вычисления определенного интеграла следующими математическими методами:
	1) Методом прямоугольников:
		─ левых прямоугольников;
		─ правых прямоугольников;
		─ средних прямоугольников;
	2) Методом трапеций;
	3) Методом Сипсона;
	4) По правилу трех восьмых. 
Используемые переменные:
a ─ нижний предел интегрирования;
b ─	верхний предел интегрирования;
n ─ количество разбиений отрезков;
my_table ─ таблица, содержащая результаты работы программы.
Используемые функции:
mf ─ подынтегральная функция;
leftrect ─ вычисление интеграла методом левых прямоугольников;
rightrect ─ вычисление интеграла методом правых прямоугольников;
midrect ─ вычисление интеграла методом средних прямоугольников;
simpson ─ вычисление интеграла методом Симпсона;
trapezium ─ вычисление интеграла методом тапеций;
t_e ─ вычисление интеграла по правилу трех восьмых;
check ─ проверка вводимого числа на корректность.
'''
import math
from prettytable import PrettyTable

'''
mf — подынтегральная функция.
Формальный параметр:
x ─ изменяемый аргумент функции.
'''
def mf(x):
	return math.sin(x)

'''
leftrect ─ вычисление интеграла методом левых прямоугольников.
Формальныe параметры:
a ─ нижний предел интегрирования;
b ─	верхний предел интегрирования;
n ─ количество разбиений отрезков.
Локальные переменные:
h ─ шаг вычисления;
x ─ аргумент функции;
y ─ значение интеграла;
i ─ вспомогательная переменная.
'''
def leftrect(a,b,n):
	h = (b-a)/n     				#вычисление шага
	x = a 							#начальное значение аргумента
	y = i = 0
	while True:						#вычисление значения интеграла
		y +=mf(x)
		x +=h
		i +=1
		if i>(n-1):
			y*=h
			return y
		
'''
rightrect ─ вычисление интеграла методом правых прямоугольников.
Формальные параметры:
a ─ нижний предел интегрирования;
b ─	верхний предел интегрирования;
n ─ количество разбиений отрезков.
Локальные переменные:
h ─ шаг вычисления;
x ─ аргумент функции;
y ─ значение интеграла;
i ─ вспомогательная переменная.
'''
def rightrect(a,b,n):
	h=(b-a)/n     				  #вычисление шага
	x=a+h 						  #начальное значение аргумента
	y= 0
	i =1
	while True:					  #вычисление значения интеграла
		y+=mf(x)
		x+=h
		i+=1
		if i>n:
			y*=h
			return y

'''
midrect ─ вычисление интеграла методом средних прямоугольников.
Формальные параметры:
a ─ нижний предел интегрирования;
b ─	верхний предел интегрирования;
n ─ количество разбиений отрезков.
Локальные переменные:
h ─ шаг вычисления;
x ─ аргумент функции;
y ─ значение интеграла;
i ─ вспомогательная переменная.
'''
def midrect(a,b,n):
	h=(b-a)/n     				  #вычисление шага
	x=a+h/2 					  #начальное значение аргумента
	y =  i = 0
	while True:					  #вычисление значения интеграла
		y+=mf(x)
		x+=h
		i+=1
		if i>(n-1):
			y*=h
			return y

'''
simpson ─ вычисление интеграла методом Симпсона.
Формальные параметры:
a ─ нижний предел интегрирования;
b ─	верхний предел интегрирования;
n ─ количество разбиений отрезков.
Локальные переменные:
h ─ шаг вычисления;
x ─ аргумент функции;
y ─ значение интеграла;
i ─ вспомогательная переменная.
'''
def simpson(a,b,n):
	h=(b-a)/n    				  #вычисление шага
	x=a+h 					  	  #начальное значение аргумента
	y=mf(a)+mf(b)
	i = c =1
	while True:					  #вычисление значения интеграла
		y=y+(3+c)*mf(x)
		x=x+h
		c=(-c)
		i=i+1
		if i>(n-1):
			y=y*h/3
			return y

'''
trapezium ─ вычисление интеграла методом трапеций.
Формальные параметры:
a ─ нижний предел интегрирования;
b ─	верхний предел интегрирования;
n ─ количество разбиений отрезков.
Локальные переменные:
h ─ шаг вычисления;
x ─ аргумент функции;
y ─ значение интеграла;
i ─ вспомогательная переменная.
'''
def trapezium(a,b,n):
	h=(b-a)/n 					  #вычисление шага
	x=a+h
	y1=mf(a)+mf(b)
	y=0
	i=1
	while True:					  #вычисление значения интеграла
		y=y+mf(x)
		x=x+h
		i=i+1
		if i>(n-1):
			y=(2*y+y1)*h/2
			return y

'''
t_e ─ вычисление интеграла по правилу трех восьмых.
Формальные параметры:
a ─ нижний предел интегрирования;
b ─	верхний предел интегрирования;
n ─ количество разбиений отрезков.
Локальные переменные:
m ─ вспомогательная переменная;
h ─ шаг вычисления;
x ─ аргумент функции;
y ─ значение интеграла;
i ─ вспомогательная переменная.
'''
def t_e(a,b,n):
	m = 3*n-1
	h = (b-a)/(3*n)
	s = mf(a)+mf(b)
	for i in range(m):					  #вычисление значения интеграла						
		x = a+h*i
		if i % 3 == 0:
			s = s+2*mf(x)
		else:
			s = s +3*mf(x)
	return 3/8*s*h


'''
check ─ проверка вводимого числа на корректность.
Формальный параметр:
lim ─ проверяемый на корректность аргумент.
'''

def check_one(lim):
	try:#является ли переменная числом
		if (float(lim) >= -30) and (float(lim) <= 30):
			return lim
	except ValueError:			
		print("была допущена ошибка, повторите ввод")
		return False

def check_two(lim):
	if lim.isnumeric():						 #является ли переменная числом
		if (int(lim) >= -30) and (int(lim) <= 30):
			return int(lim)
	print("была допущена ошибка, повторите ввод")
	return False



def main():
	a = b = n =  False
	while not a:							  #цикл считывания
		a = check_one(input('Введите нижний предел: '))
	while not b:
		b = check_one(input('Введите верхний предел: '))
	while not n:
		n = check_two(input('Ввдетие количество разбиений отрезка: '))
	
	print(
		"\n\nВерхний предел: ",
		a,"\nНижний предел: ",
		b,"\nколичество разбиений отрезка: ",n)


	a = float(a)
	b = float(b)
	my_table = PrettyTable(['метод','значение'])#создание таблицы для вывода
	my_table.add_row(['трапеции ', '%8.6f'%trapezium(a,b,n)])
	my_table.add_row(['симпсон', '%8.6f'%simpson(a,b,n)])
	my_table.add_row(['левые прямоугольники', '%8.6f'%leftrect(a,b,n)])
	my_table.add_row(['правые прямоугольники', '%8.6f'%rightrect(a,b,n)])
	my_table.add_row(['средние прямоугольники','%8.6f'%midrect(a,b,n)])
	my_table.add_row(['метод трёх восьмых','%8.6f'%t_e(a,b,n)])
	
	print(my_table)								#вывод таблицы
if __name__ == '__main__':
	main()
